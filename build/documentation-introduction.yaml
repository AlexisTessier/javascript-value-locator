- section: Introduction
- p: >
    This module provide a minimalist api to load (**asynchronously only**) javascript values from different sources, using **javascript value locators** - ***JVL***.
    A ***JVL*** is an object or a string (matching a specific format), which represent a way to load a javascript value.
    It's composed both of a **protocol** and a **target**.
- js: >
    // this is a jvl object

    {
        protocol: 'protocol-name',
        target: 'full/path/to/module/exporting/the/targeted/value'
    }


    // this is the equivalent jvl string

    'protocol-name:full/path/to/module/exporting/the/targeted/value'
- p: >
    You can see this module as a kind of [webpack](https://webpack.js.org/) at the run time, where protocols are loaders, and where instead of doing this :
- js: >
    require.ensure([], require => {
        const value = require('module/path');

        // do something with the value
    })
- p: >
    You do this: <a name="introduction-examples"></a>
- js: >
    const  jvl = require('javascript-value-locator');


    jvl.load('require:module/path').then(value => {
        // do something with the value
    })
- p: >
    And for example, if you want to load a yaml, you could use a specific protocol, as you would have used a yaml-loader in webpack
- js: >
    const jvl = require('javascript-value-locator');


    // Assuming that a "require-yaml" protocol was defined in the first place

    // (which is currently not the case by default)

    jvl.load('require-yaml:module/path.yaml').then(value => {
        // do something with the value
    })
- p: >
    ***Note that the comparison with webpack is only here for explanatory purpose, this module doesn't aim the same use cases.***
- title: Purpose
- p: >
    The [previous examples](#introduction-examples) are here only for the sake of explaining the module basic usage.
    If you want to require a module in node.js, you should more than probably just do a require (unless you want to load it asynchronously).
    
    ***The following use case is the one for what the module was created in the first place***.
- subtitle: Use case
- li: Use the JVL string format to "require" a module in a cli command option
- p: >
    Assuming you want to provide a command with an option which can be a javascript value. If the option is a number, it's ok to do that:
- cli: >
    cli command input --javascript-value-option=5
- p: >
    But if the option is a complex/dynamic object, using JVL allow you to do that:
- cli: >
    cli command input --javascript-value-option=require:full/path/to/module
- p: >
    The cli users have in that way a more fine control on the module he want to do some task.

    A logger module is a good example for instance. Assuming you implement a cli command which only log the input, you could have something like :
    <a name="custom-protocols-example"></a>
- js: >
    // load-override.js

    // create a custom load function


    const {load, setLocatorDefaultProtocol, defaultProtocols} = require('javascript-value-locator');


    module.exports = function customLoad(locator, options){
        // if the locator is an object and doesn't have protocol property, 
        // or if it's a string without protocol ahead, the 'custom-protocol' will be used

        load(setLocatorDefaultProtocol(locator, 'custom-protocol'), options, {
            protocols: Object.assign({}, defaultProtocols, {
                'custom-protocol': function(resolve, reject, target, opts){

                }
            })
        })
    }
- js: >
    // require
- js: >
    // log-command.js

    function logCommand(input, log = console.log){
        //enable silent mode
        if(log === false){
            log = ()=>{};
        }


        assert(typeof log === 'function')
    }
- subtitle: Speculative use cases
- p: >
    The module wasn't thinked in order to do that, but it may could be used to accomplish some of these things:
- li: Create and use some custom protocols able to load javascript from the cloud
- li: Use in the browser to load assets (still with custom protocols)
- li: And probably more...
- section: Get started
- title: Install
- title: Load one or more values from JVL
- title: Available protocols
- title: Use custom protocols 
- p: You can use the inject.protocols option of the load function. [Look here for concrete example](#custom-protocols-example).
#- title: Nesting and computed values
- title: Load a value synchronously
- p: JVL is not aimed to do that.
#- section: Examples
#- section: Contribute
#- title: How to contribute ?
#- title: Roadmap
- section: About the documentation
- p: >
    The following documentation was generated using [documentation.js](http://documentation.js.org/) and is also available in a more interactive format [here : url](/index.html)
- title: Naming conventions
- li: CapitalizedCamelCasedNames are used for [types](https://en.wikipedia.org/wiki/Duck_typing)
- li: dashified-case-names are used for filenames
- li: camelCasedNames are used for methods and properties
- section: Documentation
- section: License
- p: >
    [MIT](https://opensource.org/licenses/MIT)
    Copyright (c) 2017-present, Alexis Tessier